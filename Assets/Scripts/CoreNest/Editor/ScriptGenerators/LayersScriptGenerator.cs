using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using UnityEditor;
using UnityEditorInternal;
using UnityEngine;

[InitializeOnLoad]
public static class LayersScriptGenerator
{
    public const string className = "Layers";
    public const string extension = ".cs";
    public const string targetFolderPath = "Scripts/GameControl";

    private static string currentFileContent = "";
    private static string pathToTargetFolder = "";

    private static string FilePath => Path.Combine(pathToTargetFolder, className + extension);

    [MenuItem("Assets/Create/LayersAndTags/LayersFile", priority = -20)]
    private static void CreateTagsFile()
    {
        if (TryGetPathToTargetFolder() && !string.IsNullOrEmpty(pathToTargetFolder) && File.Exists(FilePath))
        {
            Debug.LogWarning("Layers file already exists");
            return;
        }

        Directory.CreateDirectory(Path.Combine(Application.dataPath, targetFolderPath));
        File.Create(Path.Combine(Application.dataPath, targetFolderPath, className + extension));
        AssetDatabase.ImportAsset(Path.Combine("Assets", targetFolderPath, className + extension));
    }

    static LayersScriptGenerator()
    {
        //initialization of static fields in update because they are reset on domain reload and editor update callback isn't
        //there can be a situation where update is called and fields have default value
        EditorApplication.update += Update;
    }

    private static void Update()
    {
        if (!TryGetPathToTargetFolder() || string.IsNullOrEmpty(pathToTargetFolder))
        {
            return;
        }

        if (string.IsNullOrEmpty(currentFileContent))
        {
            TryGetCurrentFileContent();
        }

        string newFileContent = GetNewFileContent();
        if (newFileContent != currentFileContent)
        {
            currentFileContent = newFileContent;
            File.WriteAllText(FilePath, currentFileContent);

            //force unity to reimport this script so it recompiles it and doesn't throw warnings that "the file has been modified and unity doesn't know when"
            AssetDatabase.ImportAsset(Path.Combine("Assets", targetFolderPath, className + extension));
        }
    }

    private static bool TryGetPathToTargetFolder()
    {
        pathToTargetFolder = Directory.GetDirectories(Application.dataPath, targetFolderPath).FirstOrDefault();
        return !string.IsNullOrEmpty(pathToTargetFolder);
    }

    private static bool TryGetCurrentFileContent()
    {
        string filePath = FilePath;
        if (File.Exists(filePath))
        {
            currentFileContent = File.ReadAllText(filePath);
            return true;
        }
        return false;
    }

    private static string GetNewFileContent()
    {
        string[] layers = InternalEditorUtility.layers;

        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.AppendLine("//Script generated by LayersScriptGenerator.cs");
        stringBuilder.AppendLine($"public static class {className}");
        stringBuilder.AppendLine("{");

        int i = 0;
        foreach (string layer in layers)
        {
            string fieldName = ClearSpecialCharacters(layer);
            stringBuilder.AppendLine($"\tpublic const int {fieldName} = {LayerMask.NameToLayer(layer)};");
            i++;
        }

        stringBuilder.AppendLine("}");

        return stringBuilder.ToString();
    }

    private static string ClearSpecialCharacters(string str)
    {
        string pattern = "[^a-zA-Z0-9]";
        string replacement = "_";
        return Regex.Replace(str, pattern, replacement);
    }
}
