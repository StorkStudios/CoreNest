using System.Text;
using UnityEditor;
using UnityEditorInternal;

[InitializeOnLoad]
public static class TagScriptGenerator
{
    private class ScriptGenerator : ScriptGeneratorBase
    {
        public ScriptGenerator(string name, string assetPath, string extension = ".cs") : base(name, assetPath, extension) { }

        protected override string GetNewFileContent()
        {
            string[] tags = InternalEditorUtility.tags;

            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine($"//Script generated by {nameof(TagScriptGenerator)}.cs");
            stringBuilder.AppendLine($"public enum {name}");
            stringBuilder.AppendLine("{");

            foreach (string tag in tags)
            {
                string fieldName = ReplaceSpecialCharacters(tag);
                stringBuilder.AppendLine($"\t[StringValue(@\"{tag}\")]");
                stringBuilder.AppendLine($"\t{fieldName},\n");
            }

            stringBuilder.AppendLine("}");

            stringBuilder.AppendLine("");

            stringBuilder.AppendLine($"public static class {name}Extensions");
            stringBuilder.AppendLine("{");
            stringBuilder.AppendLine($"\tpublic static string GetTagString(this {name} value)");
            stringBuilder.AppendLine("\t{");
            stringBuilder.AppendLine("\t\treturn value.GetStringValue();");
            stringBuilder.AppendLine("\t}");
            stringBuilder.AppendLine("}");

            return stringBuilder.ToString();
        }
    }

    private readonly static ScriptGenerator generator;

    [MenuItem("Assets/Create/GameControl/TagsFile", priority = -20)]
    private static void CreateAndUpdateTagsFile()
    {
        generator.CreateAndUpdateFile();
    }

    static TagScriptGenerator()
    {
        generator ??= new ScriptGenerator("Tag", "Scripts/GameControl");

        EditorApplication.update += generator.UpdateFile;
    }
}
