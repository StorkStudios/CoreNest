using System.Text;
using UnityEditor;
using UnityEditorInternal;

namespace StorkStudios.CoreNest
{
    [InitializeOnLoad]
    public static class TagScriptGenerator
    {
        private class ScriptGenerator : ScriptGeneratorBase
        {
            public ScriptGenerator(string name, string assetPath, string extension = ".cs") : base(name, assetPath, extension) { }

            protected override string GetNewFileContent()
            {
                string[] tags = InternalEditorUtility.tags;

                IndentedStringBuilder builder = new IndentedStringBuilder(new StringBuilder(), "\t");
                builder.AppendLine($"//Script generated by {nameof(TagScriptGenerator)}.cs");
                builder.AppendLine("");
                builder.AppendLine("namespace StorkStudios.CoreNest");
                using (builder.BeginIndentScope(1, "{", "}"))
                {
                    builder.AppendLine($"public enum {name}");
                    using (builder.BeginIndentScope(1, "{", "}"))
                    {
                        foreach (string tag in tags)
                        {
                            string fieldName = ReplaceSpecialCharacters(tag);
                            builder.AppendLine($"[StringValue(@\"{tag}\")]");
                            builder.AppendLine($"{fieldName},");
                            builder.AppendLine("");
                        }
                    }

                    builder.AppendLine("");

                    builder.AppendLine($"public static class {name}Extensions");
                    using (builder.BeginIndentScope(1, "{", "}"))
                    {
                        builder.AppendLine($"public static string GetTagString(this {name} value)");
                        using (builder.BeginIndentScope(1, "{", "}"))
                        {
                            builder.AppendLine("return value.GetStringValue();");
                        }
                    }
                }
                return builder.ToString();
            }
        }

        private readonly static ScriptGenerator generator;

        [MenuItem("Assets/Create/GameControl/TagsFile", priority = -20)]
        private static void CreateAndUpdateTagsFile()
        {
            generator.CreateAndUpdateFile();
        }

        static TagScriptGenerator()
        {
            generator ??= new ScriptGenerator("Tag", "Scripts/GameControl");

            EditorApplication.update += generator.UpdateFile;
        }
    }
}