using System.Text;
using UnityEditor;
using UnityEditorInternal;
using UnityEngine;

namespace StorkStudios.CoreNest
{
    [InitializeOnLoad]
    public static class LayerScriptGenerator
    {
        private class ScriptGenerator : ScriptGeneratorBase
        {
            public ScriptGenerator(string name, string assetPath, string extension = ".cs") : base(name, assetPath, extension) { }

            protected override string GetNewFileContent()
            {
                string[] layers = InternalEditorUtility.layers;

                IndentedStringBuilder builder = new IndentedStringBuilder(new StringBuilder(), "\t");
                builder.AppendLine($"//Script generated by {nameof(LayerScriptGenerator)}.cs");
                builder.AppendLine("");
                builder.AppendLine("namespace StorkStudios.CoreNest");
                using (builder.BeginIndentScope(1, "{", "}"))
                {
                    builder.AppendLine($"public enum {name}");
                    using (builder.BeginIndentScope(1, "{", "}"))
                    {
                        int i = 0;
                        foreach (string layer in layers)
                        {
                            string fieldName = ReplaceSpecialCharacters(layer);
                            builder.AppendLine($"{fieldName} = {LayerMask.NameToLayer(layer)},");
                            i++;
                        }
                    }

                    builder.AppendLine("");

                    builder.AppendLine($"public static class {name}Extensions");
                    using (builder.BeginIndentScope(1, "{", "}"))
                    {
                        builder.AppendLine($"public static int GetLayerIndex(this {name} value)");
                        using (builder.BeginIndentScope(1, "{", "}"))
                        {
                            builder.AppendLine("return (int)value;");
                        }
                    }
                }
                return builder.ToString();
            }
        }

        private readonly static ScriptGenerator generator;

        [MenuItem("Assets/Create/GameControl/LayersFile", priority = -20)]
        private static void CreateAndUpdateLayersFile()
        {
            generator.CreateAndUpdateFile();
        }

        static LayerScriptGenerator()
        {
            generator ??= new ScriptGenerator("Layer", "Scripts/GameControl");

            EditorApplication.update += generator.UpdateFile;
        }
    }
}