using System.Text;
using UnityEditor;
using UnityEditorInternal;
using UnityEngine;

[InitializeOnLoad]
public static class LayerScriptGenerator
{
    private class ScriptGenerator : ScriptGeneratorBase
    {
        public ScriptGenerator(string name, string assetPath, string extension = ".cs") : base(name, assetPath, extension) { }

        protected override string GetNewFileContent()
        {
            string[] layers = InternalEditorUtility.layers;

            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendLine($"//Script generated by {nameof(LayerScriptGenerator)}.cs");
            stringBuilder.AppendLine($"public enum {name}");
            stringBuilder.AppendLine("{");

            int i = 0;
            foreach (string layer in layers)
            {
                string fieldName = ReplaceSpecialCharacters(layer);
                stringBuilder.AppendLine($"\t{fieldName} = {LayerMask.NameToLayer(layer)},");
                i++;
            }

            stringBuilder.AppendLine("}");

            stringBuilder.AppendLine("");

            stringBuilder.AppendLine($"public static class {name}Extensions");
            stringBuilder.AppendLine("{");
            stringBuilder.AppendLine($"\tpublic static int GetLayerIndex(this {name} value)");
            stringBuilder.AppendLine("\t{");
            stringBuilder.AppendLine("\t\treturn (int)value;");
            stringBuilder.AppendLine("\t}");
            stringBuilder.AppendLine("}");

            return stringBuilder.ToString();
        }
    }

    private readonly static ScriptGenerator generator;

    [MenuItem("Assets/Create/GameControl/LayersFile", priority = -20)]
    private static void CreateAndUpdateLayersFile()
    {
        generator.CreateAndUpdateFile();
    }

    static LayerScriptGenerator()
    {
        generator ??= new ScriptGenerator("Layer", "Scripts/GameControl");

        EditorApplication.update += generator.UpdateFile;
    }
}
